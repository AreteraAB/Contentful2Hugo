plugins: 
services: 
 scheduler: 
  type: scheduler
  interval: "00:01:00"
 contentfulWebhook: 
  type: httplistener
  path: contentfulwebhook
 content: 
  type: file
  path: contentfulkvs
  createMissingFolders: true
 markdownoutput:
  type: file
  path: /var/output
  createMissingFolders: true

pipelines: 
 # Pipeline for scheduled polling of Contentful's Sync api 
 -
  id: poll_contentful
  when: 
   - {service: scheduler}
   - {service: queue, topic: contentful_fetchupdates }
   - {service: queue, topic: contentful_fetchupdates_nextpage }
  from:
   - {task: module, module: contentful, function: fetchUpdates, spaceId: "${spaceId:-cfexampleapi}", accessToken: "${accessToken:-b4c0n73n7fu1}" }
  do: 
   - {task: select, path: "assets[*]", publish: contentful_asset, await: true, keepResult: false }
   - {task: select, path: "entries[*]" }
   - {task: module, module: contentful, function: createNewEntryPerLocale }
  to: 
   - {task: store, service: content, key: "#{sys.id}_#{locale}", index: entries }
 
 # A set of pipelines for updates received from a webhook calls to http://.../contentfulwebhook 
 # Handle publish of Entries
 -
  id: publish_entry_webhook 
  when: 
   - {service: contentfulWebhook }
  do: 
   - {task: where, path: "headers.X-Contentful-Topic", equal: "ContentManagement.Entry.publish" }
   - {task: select, path: body }
   - {task: module, module: contentful, function: createNewEntryPerLocale }
  to: 
   - {task: store, service: content, key: "#{sys.id}_#{locale}", index: entries }
  then: 
   - {task: queue, topic: contentful_all_content_fetched, empty: false }
 
 # Handle publish of Assets
 - 
  id: publish_asset_webhook 
  when: 
   - {service: contentfulWebhook }
  do: 
   - {task: where, path: "headers.X-Contentful-Topic", equal: "ContentManagement.Asset.publish" }
   - {task: select, path: body }
  to: 
   - {task: queue, topic: contentful_asset }
  then: 
   - {task: queue, topic: contentful_all_content_fetched, empty: false }
 
 # Handle deletion of Entries
 - 
  id: unpublish_entry_webhook 
  when: 
   - {service: contentfulWebhook}
  do: 
   - {task: where, path: "headers.X-Contentful-Topic", equal: "ContentManagement.Entry.unpublish"}
   - {task: select, path: body}
   - {task: delete, service: content, key: "#{sys.id}_sv", index: entries }
   - {task: delete, service: markdownoutput, key: "#{sys.id}.md" }
  then: 
   - {task: queue, topic: contentful_all_content_fetched, empty: false}
 
 # Pipeline for download and storage of image assets
 -
  id: asset  
  when: 
   - {service: queue, topic: contentful_asset}
  do: 
   - {task: module, module: contentful, function: createNewEntryPerLocale}
   - {task: store, service: content, key: "#{sys.id}_#{locale}", index: assets}
   - {task: where, path: "fields.file.url", isnull: false }
   - {task: httpget, url: "http:#{fields.file.url}", format: binary }
  to: 
   - {task: file, path: "/var/images", filename: "#{fields.file.fileName}"}
 
 # Pipeline for conversion to markdown
 -
  id: markdown 
  semaphore: 1
  when: 
   - {service: queue, topic: contentful_all_content_fetched }
  from: 
   - {task: enumkeys, service: content, index: entries }
  do:
   - {task: module, module: hugo, function: formatEntry }
  to: 
   - {task: store, service: markdownoutput, key: "#{metadata:filename}" }
